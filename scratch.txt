https://chat.openai.com/c/53039a88-8297-488d-9c85-0e5e04f39646







so, client side, let's do this:

```
 case 'fight/canAttack':
            setOptions({ list: data.options, query: 'attack' });
            break;
          case 'fight/canBlock':
            setOptions({ list: data.options, query: 'block' });
            break;
```

where we have the server send options as part of the payload for canAttack and canBlock.

it determines what to send depending on what's going on.

Let's say we have, server-side, moves.js:

```
const standingMoves = [
  "feel-out",
  "jab",
  "hook",
  "uppercut",
  "body-punch",
  "body-kick",
  "leg-kick",
  "head-kick",
  "grapple"
];

const grapplingMoves = [
  "progress",
  "escape",
  "elbow",
  "smesh",
  "headbutt-stomach",
  "knee-to-body",
];

const submissions = [
  "kimura", 
  "rear-naked-choke", 
  "arm-bar", 
  "triangle-choke",
  "guillotine"
];

const successRate = {
  "jab": 45,
  "elbow": 45,
  "hook": 45,
  "uppercut": 45,
  "body-punch": 45,
  "body-kick": 45,
  "leg-kick": 65,
  "head-kick": 35,
  "grapple": 45,

  // grapple only
  "progress": 33,
  "escape": 37,
  "smesh": 45,
  "headbutt-stomach": 55,
  "knee-to-body": 40,

  // submissions
  "kimura": 5,
  "rear-naked-choke": 8,
  "arm-bar": 5,
  "triangle-choke": 5,
  "guillotine": 5
}

const damageRate = {
  "jab": 5,
  "elbow": 5,
  "hook": 5,
  "uppercut": 6,
  "body-punch": 5,
  "body-kick": 5,
  "leg-kick": 3,
  "head-kick": 6,
  "smesh": 6,
  "headbutt-stomach": 1,
  "knee-to-body": 5,
}

module.exports = {
  standingMoves,
  grapplingMoves,
  tkoMoves,
  submissions,
  successRate,
  damageRate,
};
```

so, in the case of sending canAttack, we will determine which moves are available based on this logic:

```
let availableMoves = [];
  if (fightData.mode === "standing") {
    availableMoves = [...standingMoves];
  } else if (fightData.mode === "grappling") {
    availableMoves = [...grapplingMoves];
    // in order to be able to try a submission you have to have some submissionProgress
    // *or* 10% of the time, you can seize a wild opportunity knowing it's a long shot
    // statistics-wise (submission progress changes submission probability)
    if (submissionProgress[0] > 0 || Math.random() < 0.10) {
      availableMoves = availableMoves.concat(submissions);
    }
  }
```





































i have written a little MMA simulator which is turn-based, in javascript. It uses functions that present clickable divs to the user, receiving the answer, and then takes actions based on the move /block selected (depending on computer vs player, who has initiative). Here is the code for the fight/turn logic. You can see it references global state variables for the fight, such as acuity, submissionProgress, and health. I would like to make a *multiplayer* human-to-human version. 

```
//
// I/O / decision / fight-logic functions
//

function recoverBetweenRounds() {
  // modify acuity
  let acuityAvg = (acuity[0] + acuity[1])/2;
  // decay down to avg if below 16 health
  if (Math.random() < 0.6) {
    if (health[0] < 16 && acuity[0] > acuityAvg) {
      acuity[0] = acuityAvg;
    }
  }
  if (Math.random() < 0.6) {
    if (health[1] < 16 && acuity[1] > acuityAvg) {
      acuity[1] = acuityAvg;
    }
  }
  // decay up to avg *unless* below 8 health
  if (health[0] >= 8 && acuity[0] < acuityAvg) {
    acuity[0] = acuityAvg;
  }
  if (health[1] >= 8 && acuity[1] < acuityAvg) {
    acuity[1] = acuityAvg;
  }

  // recover some health randomly
  health[0] = Math.min(20, health[0] + Math.round(Math.random() * 4));
  health[1] = Math.min(20, health[1] + Math.round(Math.random() * 4));
}

function promptUser() {
  if (health[0] <= 0) {
    return stoppage("computer", "TKO");
  }
  if (health[1] <= 0) {
    return stoppage("player", "TKO");
  }

  displayRound();

  if (t == 0 && round == 1) {
    writeToOutput(`=== START OF ROUND 1 ===`);
    coinFlipInitiative();
  }

  t++;
  if (t == roundTime) {
    // end this round
    t = 0;
    writeToOutput(`=== END OF ROUND ${round} ===`);
    displayVitals();
    scoreRound();

    displayVitals();
    // start of next
    round++;
    if (round > nRounds) {
      return judgeDecision();
      hideRound();
    } else {
      displayRound();
    }
    writeToOutput(`=== START OF ROUND ${round} ===`);
    recoverBetweenRounds();
    displayVitals();
    mode = "standing";
    coinFlipInitiative();
  }

  if (mode == "standing") {
    submissionProgress = [0, 0];
  }

  // NOTE: in the below, acuities interpolate toward each other slightly
  // and 10% of the time get a boost of 10 *or* catch up to the other mostly
  if (initiative === "player") {
    acuity[0] = 0.8 * acuity[0] + 0.2 * acuity[1];
    if (Math.random() < 0.2) {
      acuity[0] = Math.round(Math.max(acuity[1] * 0.9, acuity[0] + 10));
    }
    return playerAttack();
  } else {
    acuity[1] = 0.8 * acuity[1] + 0.2 * acuity[0];
    if (Math.random() < 0.2) {
      acuity[1] = Math.round(Math.max(acuity[0] * 0.9, acuity[1] + 10));
    }
    return computerAttack();
  }
}

//
// player attack
//

async function playerAttack(initiativeStrike = 1) {
  if (health[1] <= 0) {
    return stoppage("player", "TKO");
  }

  displayVitals();

  let availableMoves = [];
  if (mode === "standing") {
    availableMoves = [...standingMoves];
  } else if (mode === "grappling") {
    availableMoves = [...grapplingMoves];
    // in order to be able to try a submission you have to have some submissionProgress
    // *or* 10% of the time, you can seize a wild opportunity knowing it's a long shot
    // statistics-wise (submission progress changes submission probability)
    if (submissionProgress[0] > 0 || Math.random() < 0.10) {
      availableMoves = availableMoves.concat(submissions);
    }
  }

  const attackChoice = await displayClickableDivs(availableMoves, "your move");
  let move;
  if (!isNaN(parseInt(attackChoice)) && parseInt(attackChoice) >= 1 && parseInt(attackChoice) <= availableMoves.length) {
    move = availableMoves[parseInt(attackChoice) - 1];
  } else if (availableMoves.includes(attackChoice.trim())) {
    move = attackChoice.trim();
  }

  if (move == "feel-out") {
    writeToOutput(`<span class="move feelOut">feel out...</span>`, "player");
    if (Math.random() < 0.5) {
      acuity[0] += Math.floor(Math.random() * 10);
      return playerAttack();
    } else {
      initiative = "computer";
      return computerAttack();
    }
  }

  return playerAttempt(move, initiativeStrike);
}

function playerAttempt(move, initiativeStrike) {
  const attemptMessage = writeToOutput(`${move}`, "player attempt");
  let block;
  switch (mode) {
    case "standing":
      block = (Math.random() * 100) < (blockSuccessRate(move) - acuity[0] + acuity[1]);
      if (block) {
        writeToOutput("blocked.", "computer block");
        initiative = "computer";
        return promptUser();
      }
      // if here, it did not block
      attemptMessage.remove();
      if (move === "grapple") {
        writeToOutput(`Takedown by ${firstName()}!`, "player green");
        roundPoints[0] += 3;
        submissionProgress[0] = Math.floor(Math.random() * 1.1);
        mode = "grappling";
        return playerAttack();
      }
      writeToOutput(`'${move}' connects!`, "player green");
      damage("computer", move);
      if ((health[1] < 6 && Math.random() < 0.70) || Math.random() < (0.37 / initiativeStrike)) {
        writeToOutput("You maintain the initiative!", "player");
        return playerAttack(initiativeStrike + 1);
      }
      initiative = "computer";
      break;
    case "grappling":
      let blockRate = blockSuccessRate(move);
      if (submissions.includes(move)) {
        blockRate /= (submissionProgress[0]/3.0 + 1);
        if (health[1] < 6) {
          blockRate *= 0.7;
        }
      }
      block = Math.random() * 100 < (blockRate - acuity[0] + acuity[1]);
      // 3% of the time, an unblockable "inspired" submission
      let inspiredSubmission = submissions.includes(move) && (Math.random() * 100 < 3);
      if (block && !inspiredSubmission) {
        writeToOutput("blocked.", "computer block");
        initiative = "computer";
        return promptUser();
      }
      // if here, it did not block
      attemptMessage.remove();
      writeToOutput(`${move} is successful!`, "player green");
      if (move == "progress") {
        submissionProgress[0] += 1;
        return playerAttack(initiativeStrike + 1);
      }
      if (move == "escape") {
        if (submissionProgress[1] == 0) {
          mode = "standing";
          return playerAttack();
        } else {
          submissionProgress[1] = 0;
          return playerAttack(initiativeStrike);
        }
      }
      if (inspiredSubmission) {
        writeToOutput("A truly inspired submission!", "commentary");
      }
      if (submissions.includes(move)) {
        return stoppage("player", `submission by ${move}`);
      } else {
        damage("computer", move);
      }
      if ((health[1] < 6 && Math.random() < 0.70) || Math.random() < (0.70 / initiativeStrike)) {
        writeToOutput("You maintain the initiative grappling", "player");
        return playerAttack(initiativeStrike + 1);
      } else {
        initiative = "computer";
      }
      break;
  }
  return promptUser();
}

//
// computer attack
//

function getRandomMove(movesArray) {
  return movesArray[Math.floor(Math.random() * movesArray.length)];
}

function getComputerMove(movesArray) {
  // put the real move 1-3 times (TODO: this is telegraphing mechanic. enrich it)
  const move = getRandomMove(movesArray);
  const computerMoves = [move];
  const realRepetition = Math.floor(Math.random() * 3) + 1;
  for (let i = 1; i < realRepetition; i++) {
    computerMoves.push(move);
  }
  while (computerMoves.length < 3) {
    const fake = getRandomMove(movesArray);
    if (!computerMoves.includes(fake)) {
      computerMoves.push(fake);
    }
  }
  // Permute the computerMoves array
  for (let i = computerMoves.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [computerMoves[i], computerMoves[j]] = [computerMoves[j], computerMoves[i]];
  }

  return [move, computerMoves];
}

async function computerAttack(initiativeStrike = 1) {
  if (health[0] <= 0) {
    return stoppage("computer", "TKO");
  }

  displayVitals();

  let availableMoves = [];
  if (mode === "standing") {
    availableMoves = [...standingMoves];
  } else if (mode === "grappling") {
    availableMoves = [...grapplingMoves];
    // in order to be able to try a submission you have to have some submissionProgress
    // *or* 10% of the time, you can seize a wild opportunity knowing it's a long shot
    // statistics-wise (submission progress changes submission probability)
    if (submissionProgress[1] > 0 || Math.random() < 0.10) {
      availableMoves = availableMoves.concat(submissions);
    }
    // computer doesn't do heatbutt stomach
    availableMoves = availableMoves.filter((x) => x != "headbutt-stomach");
  }

  let [realMove, computerMoves] = getComputerMove(availableMoves);

  // escape override if submission progress
  if (submissionProgress[0] > 0 && Math.random() < 0.6) {
    realMove = "escape";
    computerMoves[Math.round(Math.random() * 2)] = "escape";
  }

  // 20% of the time while standing, feel out,
  // or 70% of the time feel-out if behind by 20 acuity
  if (mode == "standing" &&
    (Math.random() < 0.30 || (Math.random() < 0.70 && (acuity[1] - acuity[0]) <= -15))) {
    realMove = "feel-out";
  }

  if (realMove == "feel-out") {
    writeToOutput(`<span class="move feelOut">feel out</span>`, "computer");
    if (Math.random() < 0.5) {
      acuity[1] += Math.floor(Math.random() * 10);
      return computerAttack();
    } else {
      initiative = "player";
      return playerAttack();
    }
  }

  const blockChoice = await displayClickableDivs(computerMoves, "block");
  return computerAttempt(realMove, computerMoves, initiativeStrike, blockChoice);
}

function computerAttempt(realMove, computerMoves, initiativeStrike, blockChoice) {
  const userChoice = parseInt(blockChoice);
  const userMove = computerMoves[userChoice - 1];
  let blockRate = blockSuccessRate(userMove);

  if (userMove === realMove) {
    // User guessed the real move
    blockRate *= 1.5;
  }

  if (submissions.includes(realMove)) {
    blockRate /= (submissionProgress[1]/3.0 + 1);
    if (health[0] < 6) {
      blockRate *= 0.7;
    }
  }

  const attemptMessage = writeToOutput(`${realMove}`, "computer attempt");
  if (Math.random() * 100 < (blockRate + acuity[0] - acuity[1])) {
    writeToOutput(`blocked.`, "player block");
    initiative = "player";
  } else {
    attemptMessage.remove();
    switch(mode) {
      case "standing":
        writeToOutput(`'${realMove}' connects!`, "computer red");
        if (realMove === "grapple") {
          writeToOutput("Takedown by computer!", "computer red");
          roundPoints[1] += 3;
          submissionProgress[1] = Math.floor(Math.random() * 1.1);
          mode = "grappling";
          return computerAttack();
        } else {
          damage("player", realMove);
        }
        break;
      case "grappling":
        writeToOutput(`'${realMove}' is successful!`, "computer red");
        if (realMove == "progress") {
          submissionProgress[1] += 1;
          return computerAttack(initiativeStrike + 1);
        }
        if (realMove == "escape") {
          if (submissionProgress[0] == 0) {
            mode = "standing";
            return computerAttack();
          } else {
            submissionProgress[0] = 0;
            return computerAttack(initiativeStrike);
          }
        }
        if (mode === "grappling" && submissions.includes(realMove)) {
          return stoppage("computer", `submission by ${realMove}`);
        } else {
          damage("player", realMove);
        }
        break;
    }

    if ((health[0] < 6 && Math.random() < 0.70) || (Math.random() * 100) < (70 / initiativeStrike)) {
      writeToOutput("Computer maintains the initiative!", "computer");
      return computerAttack(initiativeStrike + 1);
    } else {
      initiative = "player";
    }
  }
  return promptUser();
}
```

Essentially it consists of the player and computer sending strings to one another, for an attempted move, and the attempted block. based on probabilities, the move can do damage, change the grappling/standing state, change submission progress, or change acuity. 

Can you write a nodejs server which will present an API for players to: 

1. create a fight UUID and URL (create a URL like eg. fight/98cb213e3). This creates a fight websocket and returns it to the client (does this make sense?) along with the URL for the fight.

2: when the second player, in their browser, clicks that fight link, (we can handle this frontend part), the second player browser js will send a `/fight/join` request to the given fight by UUID (the node server has an in-memory map of currently-available fight-links), and will connect to the fight websocket.

3: Once the fight has been joined, player client JS can call the methods "/fight/attack?move=$x" or "/fight/block?move=$x" to try to block the move. 

4. When "fight/attack" or "fight/block" are called by a player, the event is sent to the other player on websocket so they can display what is currently attacking/blocking.

5. I think the clients should just send these requests to attack and block and the nodejs server API methods should handle the fight logic itself, such as changing initiative, etc. Any game state changes such as initiative, health, acuity, or submissionProgress changing, or the match ending due to TKO, submission, or going to judge's decision, are also websocket messages.








































oddly, the behaviour where - at page load - the page is scrolled down about 5% from the top, only happens on the github.io github pages site. when i visit index.html (the same index.html! all the same js files and css too!) through the :8080 of my dev machine, it does not show the behaviour. the top of the page stays where it is, nicely visible.

why is it scrolling down automatically when i view the same site from github pages URL? 



"messenger-style" display (easily see whose moves are whose in the history by left/right align)



classes
rpg
multiplayer
